server {
	listen 80;
	server_name myapp.com;
	server_tokens off;

	location /.well-known/acme-challenge/ {
		root /var/www/certbot;
	}

        location / {
                return 301 https://$host$request_uri;
        }
}

server {
	listen 443 ssl;
	server_name myapp.com;
	server_tokens off;

	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

	ssl_certificate /etc/letsencrypt/live/myapp.com/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/myapp.com/privkey.pem;
	include /etc/letsencrypt/options-ssl-nginx.conf;
	ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;	

        location / {
			proxy_pass http://myapp.com;
			proxy_set_header    Host                $http_host;
			proxy_set_header    X-Real-IP           $remote_addr;
	        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        }
	# Make a regex exception for `/.well-known` so that clients can still
        # access it despite the existence of the regex rule
        # `location ~ /(\.|autotest|...)` which would otherwise handle requests
        # for `/.well-known`.
        location ^~ /.well-known {
                # The following 6 rules are borrowed from `.htaccess`

                rewrite ^/\.well-known/host-meta\.json  /public.php?service=host-meta-json  last;
                rewrite ^/\.well-known/host-meta        /public.php?service=host-meta       last;
                rewrite ^/\.well-known/webfinger        /public.php?service=webfinger       last;
                rewrite ^/\.well-known/nodeinfo         /public.php?service=nodeinfo        last;

                location = /.well-known/carddav     { return 301 /remote.php/dav/; }
                location = /.well-known/caldav      { return 301 /remote.php/dav/; }

                try_files $uri $uri/ =404;
	}
}
